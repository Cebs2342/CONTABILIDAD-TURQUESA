import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import sqlite3
import json
from tkinter import simpledialog

class ClienteApp(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Gestión de Clientes y Productos con Inventario")
        self.geometry("800x600")

        # Conexión a la base de datos
        self.db_connection()

        # Menú de opciones
        menubar = tk.Menu(self)
        self.config(menu=menubar)

        # Menú de Clientes
        clientes_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Clientes", menu=clientes_menu)
        clientes_menu.add_command(label="Ver Lista de Clientes", command=self.mostrar_lista_clientes)
        clientes_menu.add_command(label="Exportar Clientes a JSON", command=self.exportar_clientes_json)
        clientes_menu.add_command(label="Importar Clientes desde JSON", command=self.importar_clientes_json)
        clientes_menu.add_command(label="Eliminar Cliente", command=self.eliminar_cliente)

        # Menú de Productos
        productos_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Productos", menu=productos_menu)
        productos_menu.add_command(label="Ver Lista de Productos", command=self.mostrar_lista_productos)
        productos_menu.add_command(label="Agregar Producto", command=self.agregar_producto)
        productos_menu.add_command(label="Eliminar Producto", command=self.eliminar_producto)
        productos_menu.add_command(label="Actualizar Inventario", command=self.actualizar_inventario)

        # Información del cliente
        frame_cliente = ttk.LabelFrame(self, text="Información del Cliente")
        frame_cliente.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        ttk.Label(frame_cliente, text="Código:").grid(row=0, column=0, sticky="w")
        self.codigo_entry = ttk.Entry(frame_cliente, width=10)
        self.codigo_entry.grid(row=0, column=1)

        ttk.Label(frame_cliente, text="Nombre:").grid(row=1, column=0, sticky="w")
        self.nombre_entry = ttk.Entry(frame_cliente)
        self.nombre_entry.grid(row=1, column=1)

        ttk.Label(frame_cliente, text="Fecha Nacimiento:").grid(row=1, column=2, sticky="w")
        self.fecha_nac_entry = ttk.Entry(frame_cliente)
        self.fecha_nac_entry.grid(row=1, column=3)

        ttk.Label(frame_cliente, text="Sexo:").grid(row=1, column=4, sticky="w")
        self.sexo = ttk.Combobox(frame_cliente, values=["Masculino", "Femenino"], width=10)
        self.sexo.grid(row=1, column=5)

        ttk.Label(frame_cliente, text="Teléfono:").grid(row=2, column=0, sticky="w")
        self.telefono_entry = ttk.Entry(frame_cliente)
        self.telefono_entry.grid(row=2, column=1)

        ttk.Label(frame_cliente, text="Celular:").grid(row=2, column=2, sticky="w")
        self.celular_entry = ttk.Entry(frame_cliente)
        self.celular_entry.grid(row=2, column=3)

        ttk.Label(frame_cliente, text="ID:").grid(row=2, column=4, sticky="w")
        self.id_entry = ttk.Entry(frame_cliente)
        self.id_entry.grid(row=2, column=5)

        # Otros detalles del cliente
        frame_otros = ttk.LabelFrame(self, text="Otros Detalles")
        frame_otros.grid(row=2, column=0, padx=10, pady=10, sticky="ew")

        ttk.Label(frame_otros, text="Apodo:").grid(row=0, column=0, sticky="w")
        self.apodo_entry = ttk.Entry(frame_otros)
        self.apodo_entry.grid(row=0, column=1)

        ttk.Label(frame_otros, text="E-mail:").grid(row=1, column=0, sticky="w")
        self.email_entry = ttk.Entry(frame_otros)
        self.email_entry.grid(row=1, column=1)

        ttk.Label(frame_otros, text="Observaciones:").grid(row=2, column=0, sticky="w")
        self.observaciones_text = tk.Text(frame_otros, height=3, width=40)
        self.observaciones_text.grid(row=2, column=1, padx=5, pady=5)

        # Botón para guardar cliente
        btn_guardar = ttk.Button(self, text="Guardar Cliente", command=self.guardar_cliente)
        btn_guardar.grid(row=4, column=0, padx=10, pady=10)

        # Campo para escanear el código de barras
        ttk.Label(self, text="Escanear Código de Barras:").grid(row=5, column=0, padx=10, pady=10)
        self.codigo_barras_entry = ttk.Entry(self, width=20)
        self.codigo_barras_entry.grid(row=5, column=1, padx=10, pady=10)
        self.codigo_barras_entry.bind('<Return>', self.buscar_producto)  # Vincula la tecla Enter con la función buscar_producto

        # Información del producto
        self.resultado_producto = tk.StringVar()
        ttk.Label(self, text="Producto Detectado:").grid(row=6, column=0, padx=10, pady=10)
        ttk.Label(self, textvariable=self.resultado_producto).grid(row=6, column=1, padx=10, pady=10)

    def db_connection(self):
        try:
            # Conectar o crear la base de datos
            self.conn = sqlite3.connect("tienda.db")
            self.cursor = self.conn.cursor()

            # Crear tabla de clientes si no existe
            self.cursor.execute(''' 
                CREATE TABLE IF NOT EXISTS clientes (
                    id INTEGER PRIMARY KEY,
                    codigo TEXT,
                    nombre TEXT,
                    fecha_nacimiento TEXT,
                    sexo TEXT,
                    telefono TEXT,
                    celular TEXT,
                    cliente_id TEXT,
                    apodo TEXT,
                    email TEXT,
                    observaciones TEXT
                )
            ''')

            # Crear tabla de productos si no existe
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS productos (
                    id INTEGER PRIMARY KEY,
                    codigo_barras TEXT,
                    nombre TEXT,
                    precio REAL,
                    cantidad INTEGER DEFAULT 0
                )
            ''')

            self.conn.commit()
        except sqlite3.Error as e:
            messagebox.showerror("Error", f"Error al conectar con la base de datos: {e}")

    def buscar_producto(self, event=None):
        # Función para buscar un producto usando el código de barras ingresado
        codigo_barras = self.codigo_barras_entry.get()

        if codigo_barras:
            self.cursor.execute("SELECT nombre, cantidad FROM productos WHERE codigo_barras=?", (codigo_barras,))
            producto = self.cursor.fetchone()

            if producto:
                nombre_producto, cantidad_producto = producto
                self.resultado_producto.set(f"{nombre_producto} - Cantidad: {cantidad_producto}")
            else:
                self.resultado_producto.set("Producto no encontrado.")
        else:
            self.resultado_producto.set("Por favor, ingrese un código de barras.")

    def mostrar_lista_clientes(self):
        # Mostrar la lista de clientes en una ventana nueva
        ventana_clientes = tk.Toplevel(self)
        ventana_clientes.title("Lista de Clientes")

        # Crear un árbol para mostrar la lista de clientes
        tree = ttk.Treeview(ventana_clientes, columns=("ID", "Nombre", "Teléfono", "Email"), show="headings")
        tree.heading("ID", text="ID")
        tree.heading("Nombre", text="Nombre")
        tree.heading("Teléfono", text="Teléfono")
        tree.heading("Email", text="Email")

        # Obtener los datos de los clientes
        self.cursor.execute("SELECT id, nombre, telefono, email FROM clientes")
        clientes = self.cursor.fetchall()

        # Insertar los datos en el árbol
        for cliente in clientes:
            tree.insert("", tk.END, values=cliente)

        tree.pack(fill=tk.BOTH, expand=True)

    def mostrar_lista_productos(self):
        # Mostrar la lista de productos en una ventana nueva
        ventana_productos = tk.Toplevel(self)
        ventana_productos.title("Lista de Productos")

        # Crear un árbol para mostrar la lista de productos
        tree = ttk.Treeview(ventana_productos, columns=("ID", "Nombre", "Precio", "Cantidad"), show="headings")
        tree.heading("ID", text="ID")
        tree.heading("Nombre", text="Nombre")
        tree.heading("Precio", text="Precio")
        tree.heading("Cantidad", text="Cantidad")

        # Obtener los datos de los productos
        self.cursor.execute("SELECT id, nombre, precio, cantidad FROM productos")
        productos = self.cursor.fetchall()

        # Insertar los datos en el árbol
        for producto in productos:
            tree.insert("", tk.END, values=producto)

        tree.pack(fill=tk.BOTH, expand=True)

    def exportar_clientes_json(self):
        # Función para exportar clientes a un archivo JSON
        clientes_list = []
        self.cursor.execute("SELECT * FROM clientes")
        clientes = self.cursor.fetchall()

        for cliente in clientes:
            cliente_data = {
                'id': cliente[0],
                'codigo': cliente[1],
                'nombre': cliente[2],
                'fecha_nacimiento': cliente[3],
                'sexo': cliente[4],
                'telefono': cliente[5],
                'celular': cliente[6],
                'cliente_id': cliente[7],
                'apodo': cliente[8],
                'email': cliente[9],
                'observaciones': cliente[10]
            }
            clientes_list.append(cliente_data)

        with open("clientes.json", "w") as file:
            json.dump(clientes_list, file, indent=4)

        messagebox.showinfo("Éxito", "Clientes exportados a clientes.json")

    def importar_clientes_json(self):
        # Función para importar clientes desde un archivo JSON
        try:
            with open("clientes.json", "r") as file:
                clientes_list = json.load(file)

            for cliente_data in clientes_list:
                self.cursor.execute('''
                    INSERT INTO clientes (id, codigo, nombre, fecha_nacimiento, sexo, telefono, celular, cliente_id, apodo, email, observaciones)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (cliente_data['id'], cliente_data['codigo'], cliente_data['nombre'], cliente_data['fecha_nacimiento'], cliente_data['sexo'],
                      cliente_data['telefono'], cliente_data['celular'], cliente_data['cliente_id'], cliente_data['apodo'],
                      cliente_data['email'], cliente_data['observaciones']))

            self.conn.commit()
            messagebox.showinfo("Éxito", "Clientes importados correctamente")
        except FileNotFoundError:
            messagebox.showerror("Error", "No se encontró el archivo clientes.json")

    def eliminar_cliente(self):
        # Función para eliminar un cliente por ID
        cliente_id = simpledialog.askinteger("Eliminar Cliente", "Ingrese el ID del cliente a eliminar:")

        if cliente_id:
            self.cursor.execute("DELETE FROM clientes WHERE id=?", (cliente_id,))
            self.conn.commit()
            messagebox.showinfo("Éxito", f"Cliente con ID {cliente_id} eliminado.")
        else:
            messagebox.showerror("Error", "No se proporcionó un ID válido.")

    def agregar_producto(self):
        # Función para agregar un producto
        ventana_agregar = tk.Toplevel(self)
        ventana_agregar.title("Agregar Producto")

        ttk.Label(ventana_agregar, text="Código de Barras:").grid(row=0, column=0, sticky="w")
        entry_codigo = ttk.Entry(ventana_agregar)
        entry_codigo.grid(row=0, column=1)

        ttk.Label(ventana_agregar, text="Nombre:").grid(row=1, column=0, sticky="w")
        entry_nombre = ttk.Entry(ventana_agregar)
        entry_nombre.grid(row=1, column=1)

        ttk.Label(ventana_agregar, text="Precio:").grid(row=2, column=0, sticky="w")
        entry_precio = ttk.Entry(ventana_agregar)
        entry_precio.grid(row=2, column=1)

        ttk.Label(ventana_agregar, text="Cantidad:").grid(row=3, column=0, sticky="w")
        entry_cantidad = ttk.Entry(ventana_agregar)
        entry_cantidad.grid(row=3, column=1)

        def guardar_producto():
            codigo_barras = entry_codigo.get()
            nombre = entry_nombre.get()
            precio = float(entry_precio.get())
            cantidad = int(entry_cantidad.get())

            self.cursor.execute('''
                INSERT INTO productos (codigo_barras, nombre, precio, cantidad)
                VALUES (?, ?, ?, ?)
            ''', (codigo_barras, nombre, precio, cantidad))
            self.conn.commit()
            ventana_agregar.destroy()
            messagebox.showinfo("Éxito", "Producto agregado correctamente")

        ttk.Button(ventana_agregar, text="Guardar", command=guardar_producto).grid(row=4, column=1, pady=10)

    def eliminar_producto(self):
        # Eliminar producto por código de barras
        codigo_barras = simpledialog.askstring("Eliminar Producto", "Ingrese el código de barras del producto a eliminar:")

        if codigo_barras:
            self.cursor.execute("DELETE FROM productos WHERE codigo_barras=?", (codigo_barras,))
            self.conn.commit()
            messagebox.showinfo("Éxito", f"Producto con código de barras {codigo_barras} eliminado.")
        else:
            messagebox.showerror("Error", "No se proporcionó un código de barras.")

    def actualizar_inventario(self):
        # Función para actualizar la cantidad de productos
        codigo_barras = simpledialog.askstring("Actualizar Inventario", "Ingrese el código de barras del producto:")

        if codigo_barras:
            nueva_cantidad = simpledialog.askinteger("Actualizar Inventario", "Ingrese la nueva cantidad:")

            if nueva_cantidad is not None:
                self.cursor.execute("UPDATE productos SET cantidad=? WHERE codigo_barras=?", (nueva_cantidad, codigo_barras))
                self.conn.commit()
                messagebox.showinfo("Éxito", f"Inventario actualizado para el producto con código de barras {codigo_barras}.")
            else:
                messagebox.showerror("Error", "No se proporcionó una cantidad válida.")
        else:
            messagebox.showerror("Error", "No se proporcionó un código de barras.")

    def guardar_cliente(self):
        # Función para guardar el cliente en la base de datos
        codigo = self.codigo_entry.get()
        nombre = self.nombre_entry.get()
        fecha_nac = self.fecha_nac_entry.get()
        sexo = self.sexo.get()
        telefono = self.telefono_entry.get()
        celular = self.celular_entry.get()
        cliente_id = self.id_entry.get()
        apodo = self.apodo_entry.get()
        email = self.email_entry.get()
        observaciones = self.observaciones_text.get("1.0", tk.END)

        self.cursor.execute('''
            INSERT INTO clientes (codigo, nombre, fecha_nacimiento, sexo, telefono, celular, cliente_id, apodo, email, observaciones)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (codigo, nombre, fecha_nac, sexo, telefono, celular, cliente_id, apodo, email, observaciones))
        self.conn.commit()
        messagebox.showinfo("Éxito", "Cliente guardado con éxito")

if __name__ == "__main__":
    app = ClienteApp()
    app.mainloop()
